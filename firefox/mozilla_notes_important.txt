mozilla changes

manifest.json
see manifest.json in _mozilla folder, need to add applications/gecko, remove optional permissions declarativeContent etc.

permissions.js
must remove second chrome.permissions.request() - this was only added to fix a bug in Chrome that didn't grant a previously enabled origin when a new permission is being requested with that same origin
declarativeContent not supported. must remove all references to declarativeContent
must use something like chrome.tabs.onupdated listener and chrome.tabs.executeScript instead for internal shortcuts

popup.css, options.css
for textarea css, add overflow-x: hidden; /* FF */
because mozilla adds extra height to textaeras (for scrollbars)
also add font: inherit because Chrome's default option styling has this set by default

popup.js
must change selection-input value to not use window.getSelection().toString() because FF does not support it.
must use like this:
    DOM["#selection-input"].value = DOM["#url-textarea"].value.substring(DOM["#url-textarea"].selectionStart, DOM["#url-textarea"].selectionEnd); // winndow.getSelection().toString(); does not work in FF

background.js
For content scripts (internal shortcuts), in the messageListener when we get the sender.tab object, note that sender.tab.url is undefined.
This is due to Firefox not granting permissions due to not having tabs permissions (even though we have <all_urls>!)
The two workarounds are to either get tabs permissions or use the sender.url instead of the sender.tab.url
@see https://github.com/facebook/react-devtools/issues/679
@see https://bugzilla.mozilla.org/show_bug.cgi?id=1361765

increment-decrement.js
lookbehind regex not supported (yet) in Firefox as of Version 61. Chrome supports it starting in Version 62.

encryption.js
if url part 2 is empty in Firefox, we need to do something to handle that... TODO

options.css
add body max-width: 420px since by default it goes really wide.

chromium css
must replace all references of -webkit- to no vendor prefix or -moz-

generate-alert.css
must add text-align center to ul li as FF doesn't seem to center in the options (but does in the popup) generate alerts
.overlay ul li {
  text-align: center;
}

chrome.tabs.executeScript() calls
Must use absolute paths (extension base) not relative paths for the file path to the .js file, e.g. /js/script.js, not js/script.js. Backwards compatible with Chrome

Unchecked lastError value: Error: Could not establish connection. Receiving end does not exist.
When using message passing such as chrome.runtime.sendMessage(), you must specify the callback function with a response and check if chrome.runtime.lastError exists
chrome.runtime.sendMessage({greeting: "updatePopupInstance", instance: instance}, function(response) { if (chrome.runtime.lastError) {} });

Unchecked lastError value: Error: Missing host permission for the tab
When using chrome.tabs.executeScript for the internal shortcuts, can't execute script on browser restricted pages, so check for lastError.
e.g.
  chrome.tabs.executeScript(tabId, {file: "js/shortcuts.js", runAt: "document_start"}, function(result) {
    if (chrome.runtime.lastError) {
      console.log("URLI.Background.internalShortcutsTabUpdatedListener() - chrome.runtime.lastError=" + chrome.runtime.lastError)
    }
  });

Unchecked lastError value: TypeError: can't access dead object
There were many of these errors due to Firefox not liking us using the instance...
Try using:

1. When saving an object in background memory, try creating a deep copy of the object by serializing and de-serializing using JSON.parse(JSON.stringify(obj))
@see https://stackoverflow.com/questions/45126458/store-object-from-popup-in-background-page-in-a-webextension

Example:
  /**
   * Sets the instance.
   *
   * @param tabId    the tab id to lookup this instance by
   * @param instance the instance to set
   * @public
   */
  function setInstance(tabId, instance) {
    //instances.set(tabId, instance);
    instances.set(tabId, JSON.parse(JSON.stringify(instance)));
  }


2. When using sendMessage to send an object, try creating a shallow copy of the object using Object.assign()

Example:
const instanceCopy = Object.assign({}, instance); // Firefox can't access deadobject


CSS changes (Firefox Only):
/* Firefox: Set max-width and margin */
body {
  min-width: 420px;
  max-width: 420px;
  margin: 20px;
}

/* Firefox: Add overflow-x: hidden; because Moz adds extra height to textarea (for scrollbars) */
textarea {
  overflow-x: hidden;
}

/* Firefox: Change input type number to hide spinner up/down arrows unless focused/hovered */
input[type=number] { -moz-appearance: textfield; } input[type=number]:hover, input[type=number]:focus { -moz-appearance: initial; }
















/* Firefox Override Changes Manual Before Deployment */
1. manifest.json
2. options.css overlay
#options .overlay {
  position: absolute;
  top: initial;
  bottom: 8.6em;
  left: 17em;
}



















options page changes

        <div>
          Firefox's Commands API is currently in infancy and requires you to t-y-p-e out the keys. Click on the text boxes and enter up to 2 Modifier Keys followed by 1 normal key. The API requires you to enter at least 1 modifier key.
          <br>
          Modifier Keys:Ctrl, Shift, Alt
          <br>
          Normal Keys: A-Z, 0-9, F1-F12, Comma, Period, Home, End, PageUp, PageDown, Space, Insert, Delete, Up, Down, Left, Right
          <br>
          Examples: Ctrl+Up, Ctrl+Alt+Up, Shift+PageUp
          <a href="https://developer.mozilla.org/Add-ons/WebExtensions/manifest.json/commands">More Help("Shortcut Values")?</a>
          <label>Keyboard shortcut</label>
          <input type="text" id="shortcut"/>
          <button id="update">Update keyboard shortcut</button>
          <button id="reset">Reset keyboard shortcut</button>
        </div>